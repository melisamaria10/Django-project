# Generated by Django 5.1.2 on 2024-11-27 19:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Caracteristici',
            fields=[
                ('id_caracteristici', models.AutoField(primary_key=True, serialize=False)),
                ('nume', models.CharField(max_length=50)),
                ('descriere', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Categorie',
            fields=[
                ('id_categorie', models.AutoField(primary_key=True, serialize=False)),
                ('nume', models.CharField(max_length=50)),
                ('descriere', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dealer',
            fields=[
                ('id_dealer', models.AutoField(primary_key=True, serialize=False)),
                ('nume', models.CharField(max_length=20)),
                ('telefon', models.CharField(max_length=10)),
                ('email', models.EmailField(max_length=254)),
                ('locatie', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='TipMotor',
            fields=[
                ('id_motor', models.AutoField(primary_key=True, serialize=False)),
                ('tip_motor', models.CharField(choices=[('diesel', 'Diesel'), ('benzina', 'Benzina'), ('electric', 'Electric'), ('hibrid', 'Hibrid')], max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telefon', models.CharField(blank=True, max_length=15)),
                ('data_nasterii', models.DateField(blank=True)),
                ('adresa', models.TextField(blank=True, null=True)),
                ('gen', models.CharField(blank=True, choices=[('masculin', 'Masculin'), ('feminin', 'Feminin'), ('nu doresc sa raspund', 'Nu doresc sa raspund')], max_length=30)),
                ('cod_postal', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Masina',
            fields=[
                ('id_masina', models.AutoField(primary_key=True, serialize=False)),
                ('marca', models.CharField(max_length=20)),
                ('model', models.CharField(max_length=20)),
                ('an_fabricatie', models.PositiveIntegerField()),
                ('kilometraj', models.PositiveIntegerField(default=0)),
                ('pret', models.DecimalField(decimal_places=2, max_digits=8)),
                ('imagine', models.ImageField(max_length=300, upload_to='images/')),
                ('caracteristici', models.ManyToManyField(to='lab_3.caracteristici')),
                ('categorie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab_3.categorie')),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab_3.dealer')),
                ('tip_motor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab_3.tipmotor')),
            ],
        ),
        migrations.CreateModel(
            name='Revizie',
            fields=[
                ('id_revizie', models.AutoField(primary_key=True, serialize=False)),
                ('data_revizie', models.DateField()),
                ('nr_kilometri', models.PositiveIntegerField()),
                ('serviciu', models.CharField(max_length=50)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=8)),
                ('masina', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab_3.masina')),
            ],
        ),
        migrations.AddField(
            model_name='categorie',
            name='tipuri_motor',
            field=models.ManyToManyField(to='lab_3.tipmotor'),
        ),
    ]
